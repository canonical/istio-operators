[flake8]
max-line-length = 100

[tox]
skipsdist = True
envlist = {pilot,gateway}-{unit,lint},integration

[vars]
all_path = {[vars]src_path} {[vars]tst_path}
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests/

[testenv]
allowlist_externals = tox
setenv =
    pilot: CHARM = pilot
    gateway: CHARM = gateway
    unit: TYPE = unit
    lint: TYPE = lint
passenv =
    KUBECONFIG
commands =
    tox -c charms/istio-{env:CHARM} -e {env:TYPE} {posargs}

[testenv:update-requirements]
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands =
; uses 'bash -c' because piping didn't work in regular tox commands
    pip-compile -U --resolver=backtracking requirements-fmt.in
    bash -c 'find . -type f -name "requirements*.in" | xargs --replace=\{\} pip-compile -U --resolver=backtracking \{\}'
deps =
    pip-tools
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.

[testenv:fmt]
commands =
    isort {[vars]tst_path}
    black {[vars]tst_path}
deps =
    -r requirements-fmt.txt
description = Apply coding style standards to code

[testenv:lint]
commands =
# uncomment the following line if this charm owns a lib
# codespell {[vars]lib_path}
    codespell {toxinidir}/. --skip {toxinidir}/./.git --skip {toxinidir}/./.tox \
    --skip {toxinidir}/./build --skip {toxinidir}/./lib --skip {toxinidir}/./venv \
    --skip {toxinidir}/./.mypy_cache \
    --skip {toxinidir}/./icon.svg --skip *.json.tmpl
# pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]tst_path}
    isort --check-only --diff {[vars]tst_path}
    black --check --diff {[vars]tst_path}
deps =
    -r requirements-lint.txt
description = Check code against coding style standards

[testenv:integration]
allowlist_externals = rm
commands =
    pytest --show-capture=no --log-cli-level=INFO -vvs --tb=native {posargs} tests/test_bundle.py
deps =
    -r requirements-integration.txt

[testenv:cos-integration]
allowlist_externals = rm
deps =
    -rtest-requirements.txt
commands =
    pytest --show-capture=no --log-cli-level=INFO -vvs --tb=native {posargs} tests/test_cos_integration.py

[testenv:integration-istio-pilot-upgrade]
allowlist_externals = rm
commands =
    pytest --show-capture=no --log-cli-level=INFO -vvs --tb=native {posargs} tests/test_istio-pilot_upgrade.py
deps =
    -r requirements-integration.txt
